{"mappings":"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","sources":["<anon>","uoc-boilerplate-master/src/assets/scripts/modernizr.js"],"sourcesContent":["/*!\n * Modernizr v2.7.1\n * www.modernizr.com\n *\n * Copyright (c) Faruk Ates, Paul Irish, Alex Sexton\n * Available under the BSD and MIT licenses: www.modernizr.com/license/\n */ /*\n * Modernizr tests which native CSS3 and HTML5 features are available in\n * the current UA and makes the results available to you in two ways:\n * as properties on a global Modernizr object, and as classes on the\n * <html> element. This information allows you to progressively enhance\n * your pages with a granular level of control over the experience.\n *\n * Modernizr has an optional (not included) conditional resource loader\n * called Modernizr.load(), based on Yepnope.js (yepnopejs.com).\n * To get a build that includes Modernizr.load(), as well as choosing\n * which tests to include, go to www.modernizr.com/download/\n *\n * Authors        Faruk Ates, Paul Irish, Alex Sexton\n * Contributors   Ryan Seddon, Ben Alman\n */ window.Modernizr = function(window1, document, undefined) {\n    var version = \"2.7.1\", Modernizr = {}, /*>>cssclasses*/ // option for enabling the HTML classes to be added\n    enableClasses = true, /*>>cssclasses*/ docElement = document.documentElement, /**\n     * Create our \"modernizr\" element that we do most feature tests on.\n     */ mod = \"modernizr\", modElem = document.createElement(mod), mStyle = modElem.style, /**\n     * Create the input element for various Web Forms feature tests.\n     */ inputElem /*>>inputelem*/  = document.createElement(\"input\"), /*>>smile*/ smile = \":)\", /*>>smile*/ toString = {}.toString, // TODO :: make the prefixes more granular\n    /*>>prefixes*/ // List of property values to set for css tests. See ticket #21\n    prefixes = \" -webkit- -moz- -o- -ms- \".split(\" \"), /*>>prefixes*/ /*>>domprefixes*/ // Following spec is to expose vendor-specific style properties as:\n    //   elem.style.WebkitBorderRadius\n    // and the following would be incorrect:\n    //   elem.style.webkitBorderRadius\n    // Webkit ghosts their properties in lowercase but Opera & Moz do not.\n    // Microsoft uses a lowercase `ms` instead of the correct `Ms` in IE8+\n    //   erik.eae.net/archives/2008/03/10/21.48.10/\n    // More here: github.com/Modernizr/Modernizr/issues/issue/21\n    omPrefixes = \"Webkit Moz O ms\", cssomPrefixes = omPrefixes.split(\" \"), domPrefixes = omPrefixes.toLowerCase().split(\" \"), /*>>domprefixes*/ /*>>ns*/ ns = {\n        \"svg\": \"http://www.w3.org/2000/svg\"\n    }, /*>>ns*/ tests = {}, inputs = {}, attrs = {}, classes = [], slice = classes.slice, featureName, /*>>teststyles*/ // Inject element with style element and some CSS rules\n    injectElementWithStyles = function(rule, callback, nodes, testnames) {\n        var style, ret, node, docOverflow, div = document.createElement(\"div\"), // After page load injecting a fake body doesn't work so check if body exists\n        body = document.body, // IE6 and 7 won't return offsetWidth or offsetHeight unless it's in the body element, so we fake it.\n        fakeBody = body || document.createElement(\"body\");\n        if (parseInt(nodes, 10)) // In order not to give false positives we create a node for each test\n        // This also allows the method to scale for unspecified uses\n        while(nodes--){\n            node = document.createElement(\"div\");\n            node.id = testnames ? testnames[nodes] : mod + (nodes + 1);\n            div.appendChild(node);\n        }\n        // <style> elements in IE6-9 are considered 'NoScope' elements and therefore will be removed\n        // when injected with innerHTML. To get around this you need to prepend the 'NoScope' element\n        // with a 'scoped' element, in our case the soft-hyphen entity as it won't mess with our measurements.\n        // msdn.microsoft.com/en-us/library/ms533897%28VS.85%29.aspx\n        // Documents served as xml will throw if using &shy; so use xml friendly encoded version. See issue #277\n        style = [\n            \"&#173;\",\n            '<style id=\"s',\n            mod,\n            '\">',\n            rule,\n            \"</style>\"\n        ].join(\"\");\n        div.id = mod;\n        // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.\n        // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270\n        (body ? div : fakeBody).innerHTML += style;\n        fakeBody.appendChild(div);\n        if (!body) {\n            //avoid crashing IE8, if background image is used\n            fakeBody.style.background = \"\";\n            //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible\n            fakeBody.style.overflow = \"hidden\";\n            docOverflow = docElement.style.overflow;\n            docElement.style.overflow = \"hidden\";\n            docElement.appendChild(fakeBody);\n        }\n        ret = callback(div, rule);\n        // If this is done after page load we don't want to remove the body so check if body exists\n        if (!body) {\n            fakeBody.parentNode.removeChild(fakeBody);\n            docElement.style.overflow = docOverflow;\n        } else div.parentNode.removeChild(div);\n        return !!ret;\n    }, /*>>teststyles*/ /*>>mq*/ // adapted from matchMedia polyfill\n    // by Scott Jehl and Paul Irish\n    // gist.github.com/786768\n    testMediaQuery = function(mq) {\n        var matchMedia = window1.matchMedia || window1.msMatchMedia;\n        if (matchMedia) return matchMedia(mq).matches;\n        var bool;\n        injectElementWithStyles(\"@media \" + mq + \" { #\" + mod + \" { position: absolute; } }\", function(node) {\n            bool = (window1.getComputedStyle ? getComputedStyle(node, null) : node.currentStyle)[\"position\"] == \"absolute\";\n        });\n        return bool;\n    }, /*>>mq*/ /*>>hasevent*/ //\n    // isEventSupported determines if a given element supports the given event\n    // kangax.github.com/iseventsupported/\n    //\n    // The following results are known incorrects:\n    //   Modernizr.hasEvent(\"webkitTransitionEnd\", elem) // false negative\n    //   Modernizr.hasEvent(\"textInput\") // in Webkit. github.com/Modernizr/Modernizr/issues/333\n    //   ...\n    isEventSupported = function() {\n        var TAGNAMES = {\n            \"select\": \"input\",\n            \"change\": \"input\",\n            \"submit\": \"form\",\n            \"reset\": \"form\",\n            \"error\": \"img\",\n            \"load\": \"img\",\n            \"abort\": \"img\"\n        };\n        function isEventSupported(eventName, element) {\n            element = element || document.createElement(TAGNAMES[eventName] || \"div\");\n            eventName = \"on\" + eventName;\n            // When using `setAttribute`, IE skips \"unload\", WebKit skips \"unload\" and \"resize\", whereas `in` \"catches\" those\n            var isSupported = eventName in element;\n            if (!isSupported) {\n                // If it has no `setAttribute` (i.e. doesn't implement Node interface), try generic element\n                if (!element.setAttribute) element = document.createElement(\"div\");\n                if (element.setAttribute && element.removeAttribute) {\n                    element.setAttribute(eventName, \"\");\n                    isSupported = is(element[eventName], \"function\");\n                    // If property was created, \"remove it\" (by setting value to `undefined`)\n                    if (!is(element[eventName], \"undefined\")) element[eventName] = undefined;\n                    element.removeAttribute(eventName);\n                }\n            }\n            element = null;\n            return isSupported;\n        }\n        return isEventSupported;\n    }(), /*>>hasevent*/ // TODO :: Add flag for hasownprop ? didn't last time\n    // hasOwnProperty shim by kangax needed for Safari 2.0 support\n    _hasOwnProperty = {}.hasOwnProperty, hasOwnProp;\n    if (!is(_hasOwnProperty, \"undefined\") && !is(_hasOwnProperty.call, \"undefined\")) hasOwnProp = function(object, property) {\n        return _hasOwnProperty.call(object, property);\n    };\n    else hasOwnProp = function(object, property) {\n        return property in object && is(object.constructor.prototype[property], \"undefined\");\n    };\n    // Adapted from ES5-shim https://github.com/kriskowal/es5-shim/blob/master/es5-shim.js\n    // es5.github.com/#x15.3.4.5\n    if (!Function.prototype.bind) Function.prototype.bind = function bind(that) {\n        var target = this;\n        if (typeof target != \"function\") throw new TypeError();\n        var args = slice.call(arguments, 1), bound = function() {\n            if (this instanceof bound) {\n                var F = function() {};\n                F.prototype = target.prototype;\n                var self = new F();\n                var result = target.apply(self, args.concat(slice.call(arguments)));\n                if (Object(result) === result) return result;\n                return self;\n            } else return target.apply(that, args.concat(slice.call(arguments)));\n        };\n        return bound;\n    };\n    /**\n     * setCss applies given styles to the Modernizr DOM node.\n     */ function setCss(str) {\n        mStyle.cssText = str;\n    }\n    /**\n     * setCssAll extrapolates all vendor-specific css strings.\n     */ function setCssAll(str1, str2) {\n        return setCss(prefixes.join(str1 + \";\") + (str2 || \"\"));\n    }\n    /**\n     * is returns a boolean for if typeof obj is exactly type.\n     */ function is(obj, type) {\n        return typeof obj === type;\n    }\n    /**\n     * contains returns a boolean for if substr is found within str.\n     */ function contains(str, substr) {\n        return !!~(\"\" + str).indexOf(substr);\n    }\n    /*>>testprop*/ // testProps is a generic CSS / DOM property test.\n    // In testing support for a given CSS property, it's legit to test:\n    //    `elem.style[styleName] !== undefined`\n    // If the property is supported it will return an empty string,\n    // if unsupported it will return undefined.\n    // We'll take advantage of this quick test and skip setting a style\n    // on our modernizr element, but instead just testing undefined vs\n    // empty string.\n    // Because the testing of the CSS property names (with \"-\", as\n    // opposed to the camelCase DOM properties) is non-portable and\n    // non-standard but works in WebKit and IE (but not Gecko or Opera),\n    // we explicitly reject properties with dashes so that authors\n    // developing in WebKit or IE first don't end up with\n    // browser-specific content by accident.\n    function testProps(props, prefixed) {\n        for(var i in props){\n            var prop = props[i];\n            if (!contains(prop, \"-\") && mStyle[prop] !== undefined) return prefixed == \"pfx\" ? prop : true;\n        }\n        return false;\n    }\n    /*>>testprop*/ // TODO :: add testDOMProps\n    /**\n     * testDOMProps is a generic DOM property test; if a browser supports\n     *   a certain property, it won't return undefined for it.\n     */ function testDOMProps(props, obj, elem) {\n        for(var i in props){\n            var item = obj[props[i]];\n            if (item !== undefined) {\n                // return the property name as a string\n                if (elem === false) return props[i];\n                // let's bind a function\n                if (is(item, \"function\")) // default to autobind unless override\n                return item.bind(elem || obj);\n                // return the unbound function or obj or value\n                return item;\n            }\n        }\n        return false;\n    }\n    /*>>testallprops*/ /**\n     * testPropsAll tests a list of DOM properties we want to check against.\n     *   We specify literally ALL possible (known and/or likely) properties on\n     *   the element including the non-vendor prefixed one, for forward-\n     *   compatibility.\n     */ function testPropsAll(prop, prefixed, elem) {\n        var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1), props = (prop + \" \" + cssomPrefixes.join(ucProp + \" \") + ucProp).split(\" \");\n        // did they call .prefixed('boxSizing') or are we just testing a prop?\n        if (is(prefixed, \"string\") || is(prefixed, \"undefined\")) return testProps(props, prefixed);\n        else {\n            props = (prop + \" \" + domPrefixes.join(ucProp + \" \") + ucProp).split(\" \");\n            return testDOMProps(props, prefixed, elem);\n        }\n    }\n    /*>>testallprops*/ /**\n     * Tests\n     * -----\n     */ // The *new* flexbox\n    // dev.w3.org/csswg/css3-flexbox\n    tests[\"flexbox\"] = function() {\n        return testPropsAll(\"flexWrap\");\n    };\n    // The *old* flexbox\n    // www.w3.org/TR/2009/WD-css3-flexbox-20090723/\n    tests[\"flexboxlegacy\"] = function() {\n        return testPropsAll(\"boxDirection\");\n    };\n    // On the S60 and BB Storm, getContext exists, but always returns undefined\n    // so we actually have to call getContext() to verify\n    // github.com/Modernizr/Modernizr/issues/issue/97/\n    tests[\"canvas\"] = function() {\n        var elem = document.createElement(\"canvas\");\n        return !!(elem.getContext && elem.getContext(\"2d\"));\n    };\n    tests[\"canvastext\"] = function() {\n        return !!(Modernizr[\"canvas\"] && is(document.createElement(\"canvas\").getContext(\"2d\").fillText, \"function\"));\n    };\n    // webk.it/70117 is tracking a legit WebGL feature detect proposal\n    // We do a soft detect which may false positive in order to avoid\n    // an expensive context creation: bugzil.la/732441\n    tests[\"webgl\"] = function() {\n        return !!window1.WebGLRenderingContext;\n    };\n    /*\n     * The Modernizr.touch test only indicates if the browser supports\n     *    touch events, which does not necessarily reflect a touchscreen\n     *    device, as evidenced by tablets running Windows 7 or, alas,\n     *    the Palm Pre / WebOS (touch) phones.\n     *\n     * Additionally, Chrome (desktop) used to lie about its support on this,\n     *    but that has since been rectified: crbug.com/36415\n     *\n     * We also test for Firefox 4 Multitouch Support.\n     *\n     * For more info, see: modernizr.github.com/Modernizr/touch.html\n     */ tests[\"touch\"] = function() {\n        var bool;\n        if (\"ontouchstart\" in window1 || window1.DocumentTouch && document instanceof DocumentTouch) bool = true;\n        else injectElementWithStyles([\n            \"@media (\",\n            prefixes.join(\"touch-enabled),(\"),\n            mod,\n            \")\",\n            \"{#modernizr{top:9px;position:absolute}}\"\n        ].join(\"\"), function(node) {\n            bool = node.offsetTop === 9;\n        });\n        return bool;\n    };\n    // geolocation is often considered a trivial feature detect...\n    // Turns out, it's quite tricky to get right:\n    //\n    // Using !!navigator.geolocation does two things we don't want. It:\n    //   1. Leaks memory in IE9: github.com/Modernizr/Modernizr/issues/513\n    //   2. Disables page caching in WebKit: webk.it/43956\n    //\n    // Meanwhile, in Firefox < 8, an about:config setting could expose\n    // a false positive that would throw an exception: bugzil.la/688158\n    tests[\"geolocation\"] = function() {\n        return \"geolocation\" in navigator;\n    };\n    tests[\"postmessage\"] = function() {\n        return !!window1.postMessage;\n    };\n    // Chrome incognito mode used to throw an exception when using openDatabase\n    // It doesn't anymore.\n    tests[\"websqldatabase\"] = function() {\n        return !!window1.openDatabase;\n    };\n    // Vendors had inconsistent prefixing with the experimental Indexed DB:\n    // - Webkit's implementation is accessible through webkitIndexedDB\n    // - Firefox shipped moz_indexedDB before FF4b9, but since then has been mozIndexedDB\n    // For speed, we don't test the legacy (and beta-only) indexedDB\n    tests[\"indexedDB\"] = function() {\n        return !!testPropsAll(\"indexedDB\", window1);\n    };\n    // documentMode logic from YUI to filter out IE8 Compat Mode\n    //   which false positives.\n    tests[\"hashchange\"] = function() {\n        return isEventSupported(\"hashchange\", window1) && (document.documentMode === undefined || document.documentMode > 7);\n    };\n    // Per 1.6:\n    // This used to be Modernizr.historymanagement but the longer\n    // name has been deprecated in favor of a shorter and property-matching one.\n    // The old API is still available in 1.6, but as of 2.0 will throw a warning,\n    // and in the first release thereafter disappear entirely.\n    tests[\"history\"] = function() {\n        return !!(window1.history && history.pushState);\n    };\n    tests[\"draganddrop\"] = function() {\n        var div = document.createElement(\"div\");\n        return \"draggable\" in div || \"ondragstart\" in div && \"ondrop\" in div;\n    };\n    // FF3.6 was EOL'ed on 4/24/12, but the ESR version of FF10\n    // will be supported until FF19 (2/12/13), at which time, ESR becomes FF17.\n    // FF10 still uses prefixes, so check for it until then.\n    // for more ESR info, see: mozilla.org/en-US/firefox/organizations/faq/\n    tests[\"websockets\"] = function() {\n        return \"WebSocket\" in window1 || \"MozWebSocket\" in window1;\n    };\n    // css-tricks.com/rgba-browser-support/\n    tests[\"rgba\"] = function() {\n        // Set an rgba() color and check the returned value\n        setCss(\"background-color:rgba(150,255,150,.5)\");\n        return contains(mStyle.backgroundColor, \"rgba\");\n    };\n    tests[\"hsla\"] = function() {\n        // Same as rgba(), in fact, browsers re-map hsla() to rgba() internally,\n        //   except IE9 who retains it as hsla\n        setCss(\"background-color:hsla(120,40%,100%,.5)\");\n        return contains(mStyle.backgroundColor, \"rgba\") || contains(mStyle.backgroundColor, \"hsla\");\n    };\n    tests[\"multiplebgs\"] = function() {\n        // Setting multiple images AND a color on the background shorthand property\n        //  and then querying the style.background property value for the number of\n        //  occurrences of \"url(\" is a reliable method for detecting ACTUAL support for this!\n        setCss(\"background:url(https://),url(https://),red url(https://)\");\n        // If the UA supports multiple backgrounds, there should be three occurrences\n        //   of the string \"url(\" in the return value for elemStyle.background\n        return /(url\\s*\\(.*?){3}/.test(mStyle.background);\n    };\n    // this will false positive in Opera Mini\n    //   github.com/Modernizr/Modernizr/issues/396\n    tests[\"backgroundsize\"] = function() {\n        return testPropsAll(\"backgroundSize\");\n    };\n    tests[\"borderimage\"] = function() {\n        return testPropsAll(\"borderImage\");\n    };\n    // Super comprehensive table about all the unique implementations of\n    // border-radius: muddledramblings.com/table-of-css3-border-radius-compliance\n    tests[\"borderradius\"] = function() {\n        return testPropsAll(\"borderRadius\");\n    };\n    // WebOS unfortunately false positives on this test.\n    tests[\"boxshadow\"] = function() {\n        return testPropsAll(\"boxShadow\");\n    };\n    // FF3.0 will false positive on this test\n    tests[\"textshadow\"] = function() {\n        return document.createElement(\"div\").style.textShadow === \"\";\n    };\n    tests[\"opacity\"] = function() {\n        // Browsers that actually have CSS Opacity implemented have done so\n        //  according to spec, which means their return values are within the\n        //  range of [0.0,1.0] - including the leading zero.\n        setCssAll(\"opacity:.55\");\n        // The non-literal . in this regex is intentional:\n        //   German Chrome returns this value as 0,55\n        // github.com/Modernizr/Modernizr/issues/#issue/59/comment/516632\n        return /^0.55$/.test(mStyle.opacity);\n    };\n    // Note, Android < 4 will pass this test, but can only animate\n    //   a single property at a time\n    //   daneden.me/2011/12/putting-up-with-androids-bullshit/\n    tests[\"cssanimations\"] = function() {\n        return testPropsAll(\"animationName\");\n    };\n    tests[\"csscolumns\"] = function() {\n        return testPropsAll(\"columnCount\");\n    };\n    tests[\"cssgradients\"] = function() {\n        /**\n         * For CSS Gradients syntax, please see:\n         * webkit.org/blog/175/introducing-css-gradients/\n         * developer.mozilla.org/en/CSS/-moz-linear-gradient\n         * developer.mozilla.org/en/CSS/-moz-radial-gradient\n         * dev.w3.org/csswg/css3-images/#gradients-\n         */ var str1 = \"background-image:\", str2 = \"gradient(linear,left top,right bottom,from(#9f9),to(white));\", str3 = \"linear-gradient(left top,#9f9, white);\";\n        setCss(// legacy webkit syntax (FIXME: remove when syntax not in use anymore)\n        (str1 + \"-webkit- \".split(\" \").join(str2 + str1) + // standard syntax             // trailing 'background-image:'\n        prefixes.join(str3 + str1)).slice(0, -str1.length));\n        return contains(mStyle.backgroundImage, \"gradient\");\n    };\n    tests[\"cssreflections\"] = function() {\n        return testPropsAll(\"boxReflect\");\n    };\n    tests[\"csstransforms\"] = function() {\n        return !!testPropsAll(\"transform\");\n    };\n    tests[\"csstransforms3d\"] = function() {\n        var ret = !!testPropsAll(\"perspective\");\n        // Webkit's 3D transforms are passed off to the browser's own graphics renderer.\n        //   It works fine in Safari on Leopard and Snow Leopard, but not in Chrome in\n        //   some conditions. As a result, Webkit typically recognizes the syntax but\n        //   will sometimes throw a false positive, thus we must do a more thorough check:\n        if (ret && \"webkitPerspective\" in docElement.style) // Webkit allows this media query to succeed only if the feature is enabled.\n        // `@media (transform-3d),(-webkit-transform-3d){ ... }`\n        injectElementWithStyles(\"@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}\", function(node, rule) {\n            ret = node.offsetLeft === 9 && node.offsetHeight === 3;\n        });\n        return ret;\n    };\n    tests[\"csstransitions\"] = function() {\n        return testPropsAll(\"transition\");\n    };\n    /*>>fontface*/ // @font-face detection routine by Diego Perini\n    // javascript.nwbox.com/CSSSupport/\n    // false positives:\n    //   WebOS github.com/Modernizr/Modernizr/issues/342\n    //   WP7   github.com/Modernizr/Modernizr/issues/538\n    tests[\"fontface\"] = function() {\n        var bool;\n        injectElementWithStyles('@font-face {font-family:\"font\";src:url(\"https://\")}', function(node, rule) {\n            var style = document.getElementById(\"smodernizr\"), sheet = style.sheet || style.styleSheet, cssText = sheet ? sheet.cssRules && sheet.cssRules[0] ? sheet.cssRules[0].cssText : sheet.cssText || \"\" : \"\";\n            bool = /src/i.test(cssText) && cssText.indexOf(rule.split(\" \")[0]) === 0;\n        });\n        return bool;\n    };\n    /*>>fontface*/ // CSS generated content detection\n    tests[\"generatedcontent\"] = function() {\n        var bool;\n        injectElementWithStyles([\n            \"#\",\n            mod,\n            \"{font:0/0 a}#\",\n            mod,\n            ':after{content:\"',\n            smile,\n            '\";visibility:hidden;font:3px/1 a}'\n        ].join(\"\"), function(node) {\n            bool = node.offsetHeight >= 3;\n        });\n        return bool;\n    };\n    // These tests evaluate support of the video/audio elements, as well as\n    // testing what types of content they support.\n    //\n    // We're using the Boolean constructor here, so that we can extend the value\n    // e.g.  Modernizr.video     // true\n    //       Modernizr.video.ogg // 'probably'\n    //\n    // Codec values from : github.com/NielsLeenheer/html5test/blob/9106a8/index.html#L845\n    //                     thx to NielsLeenheer and zcorpan\n    // Note: in some older browsers, \"no\" was a return value instead of empty string.\n    //   It was live in FF3.5.0 and 3.5.1, but fixed in 3.5.2\n    //   It was also live in Safari 4.0.0 - 4.0.4, but fixed in 4.0.5\n    tests[\"video\"] = function() {\n        var elem = document.createElement(\"video\"), bool = false;\n        // IE9 Running on Windows Server SKU can cause an exception to be thrown, bug #224\n        try {\n            if (bool = !!elem.canPlayType) {\n                bool = new Boolean(bool);\n                bool.ogg = elem.canPlayType('video/ogg; codecs=\"theora\"').replace(/^no$/, \"\");\n                // Without QuickTime, this value will be `undefined`. github.com/Modernizr/Modernizr/issues/546\n                bool.h264 = elem.canPlayType('video/mp4; codecs=\"avc1.42E01E\"').replace(/^no$/, \"\");\n                bool.webm = elem.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/^no$/, \"\");\n            }\n        } catch (e) {}\n        return bool;\n    };\n    tests[\"audio\"] = function() {\n        var elem = document.createElement(\"audio\"), bool = false;\n        try {\n            if (bool = !!elem.canPlayType) {\n                bool = new Boolean(bool);\n                bool.ogg = elem.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, \"\");\n                bool.mp3 = elem.canPlayType(\"audio/mpeg;\").replace(/^no$/, \"\");\n                // Mimetypes accepted:\n                //   developer.mozilla.org/En/Media_formats_supported_by_the_audio_and_video_elements\n                //   bit.ly/iphoneoscodecs\n                bool.wav = elem.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, \"\");\n                bool.m4a = (elem.canPlayType(\"audio/x-m4a;\") || elem.canPlayType(\"audio/aac;\")).replace(/^no$/, \"\");\n            }\n        } catch (e) {}\n        return bool;\n    };\n    // In FF4, if disabled, window.localStorage should === null.\n    // Normally, we could not test that directly and need to do a\n    //   `('localStorage' in window) && ` test first because otherwise Firefox will\n    //   throw bugzil.la/365772 if cookies are disabled\n    // Also in iOS5 Private Browsing mode, attempting to use localStorage.setItem\n    // will throw the exception:\n    //   QUOTA_EXCEEDED_ERRROR DOM Exception 22.\n    // Peculiarly, getItem and removeItem calls do not throw.\n    // Because we are forced to try/catch this, we'll go aggressive.\n    // Just FWIW: IE8 Compat mode supports these features completely:\n    //   www.quirksmode.org/dom/html5.html\n    // But IE8 doesn't support either with local files\n    tests[\"localstorage\"] = function() {\n        try {\n            localStorage.setItem(mod, mod);\n            localStorage.removeItem(mod);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    };\n    tests[\"sessionstorage\"] = function() {\n        try {\n            sessionStorage.setItem(mod, mod);\n            sessionStorage.removeItem(mod);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    };\n    tests[\"webworkers\"] = function() {\n        return !!window1.Worker;\n    };\n    tests[\"applicationcache\"] = function() {\n        return !!window1.applicationCache;\n    };\n    // Thanks to Erik Dahlstrom\n    tests[\"svg\"] = function() {\n        return !!document.createElementNS && !!document.createElementNS(ns.svg, \"svg\").createSVGRect;\n    };\n    // specifically for SVG inline in HTML, not within XHTML\n    // test page: paulirish.com/demo/inline-svg\n    tests[\"inlinesvg\"] = function() {\n        var div = document.createElement(\"div\");\n        div.innerHTML = \"<svg/>\";\n        return (div.firstChild && div.firstChild.namespaceURI) == ns.svg;\n    };\n    // SVG SMIL animation\n    tests[\"smil\"] = function() {\n        return !!document.createElementNS && /SVGAnimate/.test(toString.call(document.createElementNS(ns.svg, \"animate\")));\n    };\n    // This test is only for clip paths in SVG proper, not clip paths on HTML content\n    // demo: srufaculty.sru.edu/david.dailey/svg/newstuff/clipPath4.svg\n    // However read the comments to dig into applying SVG clippaths to HTML content here:\n    //   github.com/Modernizr/Modernizr/issues/213#issuecomment-1149491\n    tests[\"svgclippaths\"] = function() {\n        return !!document.createElementNS && /SVGClipPath/.test(toString.call(document.createElementNS(ns.svg, \"clipPath\")));\n    };\n    /*>>webforms*/ // input features and input types go directly onto the ret object, bypassing the tests loop.\n    // Hold this guy to execute in a moment.\n    function webforms() {\n        /*>>input*/ // Run through HTML5's new input attributes to see if the UA understands any.\n        // We're using f which is the <input> element created early on\n        // Mike Taylr has created a comprehensive resource for testing these attributes\n        //   when applied to all input types:\n        //   miketaylr.com/code/input-type-attr.html\n        // spec: www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary\n        // Only input placeholder is tested while textarea's placeholder is not.\n        // Currently Safari 4 and Opera 11 have support only for the input placeholder\n        // Both tests are available in feature-detects/forms-placeholder.js\n        Modernizr[\"input\"] = function(props) {\n            for(var i = 0, len = props.length; i < len; i++)attrs[props[i]] = !!(props[i] in inputElem);\n            if (attrs.list) // safari false positive's on datalist: webk.it/74252\n            // see also github.com/Modernizr/Modernizr/issues/146\n            attrs.list = !!(document.createElement(\"datalist\") && window1.HTMLDataListElement);\n            return attrs;\n        }(\"autocomplete autofocus list placeholder max min multiple pattern required step\".split(\" \"));\n        /*>>input*/ /*>>inputtypes*/ // Run through HTML5's new input types to see if the UA understands any.\n        //   This is put behind the tests runloop because it doesn't return a\n        //   true/false like all the other tests; instead, it returns an object\n        //   containing each input type with its corresponding true/false value\n        // Big thanks to @miketaylr for the html5 forms expertise. miketaylr.com/\n        Modernizr[\"inputtypes\"] = function(props) {\n            for(var i = 0, bool, inputElemType, defaultView, len = props.length; i < len; i++){\n                inputElem.setAttribute(\"type\", inputElemType = props[i]);\n                bool = inputElem.type !== \"text\";\n                // We first check to see if the type we give it sticks..\n                // If the type does, we feed it a textual value, which shouldn't be valid.\n                // If the value doesn't stick, we know there's input sanitization which infers a custom UI\n                if (bool) {\n                    inputElem.value = smile;\n                    inputElem.style.cssText = \"position:absolute;visibility:hidden;\";\n                    if (/^range$/.test(inputElemType) && inputElem.style.WebkitAppearance !== undefined) {\n                        docElement.appendChild(inputElem);\n                        defaultView = document.defaultView;\n                        // Safari 2-4 allows the smiley as a value, despite making a slider\n                        bool = defaultView.getComputedStyle && defaultView.getComputedStyle(inputElem, null).WebkitAppearance !== \"textfield\" && // Mobile android web browser has false positive, so must\n                        // check the height to see if the widget is actually there.\n                        inputElem.offsetHeight !== 0;\n                        docElement.removeChild(inputElem);\n                    } else if (/^(search|tel)$/.test(inputElemType)) ;\n                    else if (/^(url|email)$/.test(inputElemType)) // Real url and email support comes with prebaked validation.\n                    bool = inputElem.checkValidity && inputElem.checkValidity() === false;\n                    else // If the upgraded input compontent rejects the :) text, we got a winner\n                    bool = inputElem.value != smile;\n                }\n                inputs[props[i]] = !!bool;\n            }\n            return inputs;\n        }(\"search tel url email datetime date month week time datetime-local number range color\".split(\" \"));\n    /*>>inputtypes*/ }\n    /*>>webforms*/ // End of test definitions\n    // -----------------------\n    // Run through all tests and detect their support in the current UA.\n    // todo: hypothetically we could be doing an array of tests and use a basic loop here.\n    for(var feature in tests)if (hasOwnProp(tests, feature)) {\n        // run the test, throw the return value into the Modernizr,\n        //   then based on that boolean, define an appropriate className\n        //   and push it into an array of classes we'll join later.\n        featureName = feature.toLowerCase();\n        Modernizr[featureName] = tests[feature]();\n        classes.push((Modernizr[featureName] ? \"\" : \"no-\") + featureName);\n    }\n    /*>>webforms*/ // input tests need to run.\n    Modernizr.input || webforms();\n    /*>>webforms*/ /**\n     * addTest allows the user to define their own feature tests\n     * the result will be added onto the Modernizr object,\n     * as well as an appropriate className set on the html element\n     *\n     * @param feature - String naming the feature\n     * @param test - Function returning true if feature is supported, false if not\n     */ Modernizr.addTest = function(feature, test) {\n        if (typeof feature == \"object\") {\n            for(var key in feature)if (hasOwnProp(feature, key)) Modernizr.addTest(key, feature[key]);\n        } else {\n            feature = feature.toLowerCase();\n            if (Modernizr[feature] !== undefined) // we're going to quit if you're trying to overwrite an existing test\n            // if we were to allow it, we'd do this:\n            //   var re = new RegExp(\"\\\\b(no-)?\" + feature + \"\\\\b\");\n            //   docElement.className = docElement.className.replace( re, '' );\n            // but, no rly, stuff 'em.\n            return Modernizr;\n            test = typeof test == \"function\" ? test() : test;\n            if (typeof enableClasses !== \"undefined\" && enableClasses) docElement.className += \" \" + (test ? \"\" : \"no-\") + feature;\n            Modernizr[feature] = test;\n        }\n        return Modernizr; // allow chaining.\n    };\n    // Reset modElem.cssText to nothing to reduce memory footprint.\n    setCss(\"\");\n    modElem = inputElem = null; /**\n     * @preserve HTML5 Shiv prev3.7.1 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed\n     */ \n    (function(window1, document) {\n        /*jshint evil:true */ /** version */ var version = \"3.7.0\";\n        /** Preset options */ var options = window1.html5 || {};\n        /** Used to skip problem elements */ var reSkip = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i;\n        /** Not all elements can be cloned in IE **/ var saveClones = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i;\n        /** Detect whether the browser supports default html5 styles */ var supportsHtml5Styles;\n        /** Name of the expando, to work with multiple documents or to re-shiv one document */ var expando = \"_html5shiv\";\n        /** The id for the the documents expando */ var expanID = 0;\n        /** Cached data for each document */ var expandoData = {};\n        /** Detect whether the browser supports unknown elements */ var supportsUnknownElements;\n        (function() {\n            try {\n                var a = document.createElement(\"a\");\n                a.innerHTML = \"<xyz></xyz>\";\n                //if the hidden property is implemented we can assume, that the browser supports basic HTML5 Styles\n                supportsHtml5Styles = \"hidden\" in a;\n                supportsUnknownElements = a.childNodes.length == 1 || function() {\n                    // assign a false positive if unable to shiv\n                    document.createElement(\"a\");\n                    var frag = document.createDocumentFragment();\n                    return typeof frag.cloneNode == \"undefined\" || typeof frag.createDocumentFragment == \"undefined\" || typeof frag.createElement == \"undefined\";\n                }();\n            } catch (e) {\n                // assign a false positive if detection fails => unable to shiv\n                supportsHtml5Styles = true;\n                supportsUnknownElements = true;\n            }\n        })();\n        /*--------------------------------------------------------------------------*/ /**\n         * Creates a style sheet with the given CSS text and adds it to the document.\n         * @private\n         * @param {Document} ownerDocument The document.\n         * @param {String} cssText The CSS text.\n         * @returns {StyleSheet} The style element.\n         */ function addStyleSheet(ownerDocument, cssText) {\n            var p = ownerDocument.createElement(\"p\"), parent = ownerDocument.getElementsByTagName(\"head\")[0] || ownerDocument.documentElement;\n            p.innerHTML = \"x<style>\" + cssText + \"</style>\";\n            return parent.insertBefore(p.lastChild, parent.firstChild);\n        }\n        /**\n         * Returns the value of `html5.elements` as an array.\n         * @private\n         * @returns {Array} An array of shived element node names.\n         */ function getElements() {\n            var elements = html5.elements;\n            return typeof elements == \"string\" ? elements.split(\" \") : elements;\n        }\n        /**\n         * Returns the data associated to the given document\n         * @private\n         * @param {Document} ownerDocument The document.\n         * @returns {Object} An object of data.\n         */ function getExpandoData(ownerDocument) {\n            var data = expandoData[ownerDocument[expando]];\n            if (!data) {\n                data = {};\n                expanID++;\n                ownerDocument[expando] = expanID;\n                expandoData[expanID] = data;\n            }\n            return data;\n        }\n        /**\n         * returns a shived element for the given nodeName and document\n         * @memberOf html5\n         * @param {String} nodeName name of the element\n         * @param {Document} ownerDocument The context document.\n         * @returns {Object} The shived element.\n         */ function createElement(nodeName, ownerDocument, data) {\n            if (!ownerDocument) ownerDocument = document;\n            if (supportsUnknownElements) return ownerDocument.createElement(nodeName);\n            if (!data) data = getExpandoData(ownerDocument);\n            var node;\n            if (data.cache[nodeName]) node = data.cache[nodeName].cloneNode();\n            else if (saveClones.test(nodeName)) node = (data.cache[nodeName] = data.createElem(nodeName)).cloneNode();\n            else node = data.createElem(nodeName);\n            // Avoid adding some elements to fragments in IE < 9 because\n            // * Attributes like `name` or `type` cannot be set/changed once an element\n            //   is inserted into a document/fragment\n            // * Link elements with `src` attributes that are inaccessible, as with\n            //   a 403 response, will cause the tab/window to crash\n            // * Script elements appended to fragments will execute when their `src`\n            //   or `text` property is set\n            return node.canHaveChildren && !reSkip.test(nodeName) && !node.tagUrn ? data.frag.appendChild(node) : node;\n        }\n        /**\n         * returns a shived DocumentFragment for the given document\n         * @memberOf html5\n         * @param {Document} ownerDocument The context document.\n         * @returns {Object} The shived DocumentFragment.\n         */ function createDocumentFragment(ownerDocument, data) {\n            if (!ownerDocument) ownerDocument = document;\n            if (supportsUnknownElements) return ownerDocument.createDocumentFragment();\n            data = data || getExpandoData(ownerDocument);\n            var clone = data.frag.cloneNode(), i = 0, elems = getElements(), l = elems.length;\n            for(; i < l; i++)clone.createElement(elems[i]);\n            return clone;\n        }\n        /**\n         * Shivs the `createElement` and `createDocumentFragment` methods of the document.\n         * @private\n         * @param {Document|DocumentFragment} ownerDocument The document.\n         * @param {Object} data of the document.\n         */ function shivMethods(ownerDocument, data) {\n            if (!data.cache) {\n                data.cache = {};\n                data.createElem = ownerDocument.createElement;\n                data.createFrag = ownerDocument.createDocumentFragment;\n                data.frag = data.createFrag();\n            }\n            ownerDocument.createElement = function(nodeName) {\n                //abort shiv\n                if (!html5.shivMethods) return data.createElem(nodeName);\n                return createElement(nodeName, ownerDocument, data);\n            };\n            ownerDocument.createDocumentFragment = Function(\"h,f\", \"return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&(\" + // unroll the `createElement` calls\n            getElements().join().replace(/[\\w\\-]+/g, function(nodeName) {\n                data.createElem(nodeName);\n                data.frag.createElement(nodeName);\n                return 'c(\"' + nodeName + '\")';\n            }) + \");return n}\")(html5, data.frag);\n        }\n        /*--------------------------------------------------------------------------*/ /**\n         * Shivs the given document.\n         * @memberOf html5\n         * @param {Document} ownerDocument The document to shiv.\n         * @returns {Document} The shived document.\n         */ function shivDocument(ownerDocument) {\n            if (!ownerDocument) ownerDocument = document;\n            var data = getExpandoData(ownerDocument);\n            if (html5.shivCSS && !supportsHtml5Styles && !data.hasCSS) data.hasCSS = !!addStyleSheet(ownerDocument, // corrects block display not defined in IE6/7/8/9\n            \"article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}\");\n            if (!supportsUnknownElements) shivMethods(ownerDocument, data);\n            return ownerDocument;\n        }\n        /*--------------------------------------------------------------------------*/ /**\n         * The `html5` object is exposed so that more elements can be shived and\n         * existing shiving can be detected on iframes.\n         * @type Object\n         * @example\n         *\n         * // options can be changed before the script is included\n         * html5 = { 'elements': 'mark section', 'shivCSS': false, 'shivMethods': false };\n         */ var html5 = {\n            /**\n           * An array or space separated string of node names of the elements to shiv.\n           * @memberOf html5\n           * @type Array|String\n           */ \"elements\": options.elements || \"abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video\",\n            /**\n           * current version of html5shiv\n           */ \"version\": version,\n            /**\n           * A flag to indicate that the HTML5 style sheet should be inserted.\n           * @memberOf html5\n           * @type Boolean\n           */ \"shivCSS\": options.shivCSS !== false,\n            /**\n           * Is equal to true if a browser supports creating unknown/HTML5 elements\n           * @memberOf html5\n           * @type boolean\n           */ \"supportsUnknownElements\": supportsUnknownElements,\n            /**\n           * A flag to indicate that the document's `createElement` and `createDocumentFragment`\n           * methods should be overwritten.\n           * @memberOf html5\n           * @type Boolean\n           */ \"shivMethods\": options.shivMethods !== false,\n            /**\n           * A string to describe the type of `html5` object (\"default\" or \"default print\").\n           * @memberOf html5\n           * @type String\n           */ \"type\": \"default\",\n            // shivs the document according to the specified `html5` object options\n            \"shivDocument\": shivDocument,\n            //creates a shived element\n            createElement: createElement,\n            //creates a shived documentFragment\n            createDocumentFragment: createDocumentFragment\n        };\n        /*--------------------------------------------------------------------------*/ // expose html5\n        window1.html5 = html5;\n        // shiv the document\n        shivDocument(document);\n    })(this, document);\n    /*>>shiv*/ // Assign private properties to the return object with prefix\n    Modernizr._version = version;\n    // expose these for the plugin API. Look in the source for how to join() them against your input\n    /*>>prefixes*/ Modernizr._prefixes = prefixes;\n    /*>>prefixes*/ /*>>domprefixes*/ Modernizr._domPrefixes = domPrefixes;\n    Modernizr._cssomPrefixes = cssomPrefixes;\n    /*>>domprefixes*/ /*>>mq*/ // Modernizr.mq tests a given media query, live against the current state of the window\n    // A few important notes:\n    //   * If a browser does not support media queries at all (eg. oldIE) the mq() will always return false\n    //   * A max-width or orientation query will be evaluated against the current state, which may change later.\n    //   * You must specify values. Eg. If you are testing support for the min-width media query use:\n    //       Modernizr.mq('(min-width:0)')\n    // usage:\n    // Modernizr.mq('only screen and (max-width:768)')\n    Modernizr.mq = testMediaQuery;\n    /*>>mq*/ /*>>hasevent*/ // Modernizr.hasEvent() detects support for a given event, with an optional element to test on\n    // Modernizr.hasEvent('gesturestart', elem)\n    Modernizr.hasEvent = isEventSupported;\n    /*>>hasevent*/ /*>>testprop*/ // Modernizr.testProp() investigates whether a given style property is recognized\n    // Note that the property names must be provided in the camelCase variant.\n    // Modernizr.testProp('pointerEvents')\n    Modernizr.testProp = function(prop) {\n        return testProps([\n            prop\n        ]);\n    };\n    /*>>testprop*/ /*>>testallprops*/ // Modernizr.testAllProps() investigates whether a given style property,\n    //   or any of its vendor-prefixed variants, is recognized\n    // Note that the property names must be provided in the camelCase variant.\n    // Modernizr.testAllProps('boxSizing')\n    Modernizr.testAllProps = testPropsAll;\n    /*>>testallprops*/ /*>>teststyles*/ // Modernizr.testStyles() allows you to add custom styles to the document and test an element afterwards\n    // Modernizr.testStyles('#modernizr { position:absolute }', function(elem, rule){ ... })\n    Modernizr.testStyles = injectElementWithStyles;\n    /*>>teststyles*/ /*>>prefixed*/ // Modernizr.prefixed() returns the prefixed or nonprefixed property name variant of your input\n    // Modernizr.prefixed('boxSizing') // 'MozBoxSizing'\n    // Properties must be passed as dom-style camelcase, rather than `box-sizing` hypentated style.\n    // Return values will also be the camelCase variant, if you need to translate that to hypenated style use:\n    //\n    //     str.replace(/([A-Z])/g, function(str,m1){ return '-' + m1.toLowerCase(); }).replace(/^ms-/,'-ms-');\n    // If you're trying to ascertain which transition end event to bind to, you might do something like...\n    //\n    //     var transEndEventNames = {\n    //       'WebkitTransition' : 'webkitTransitionEnd',\n    //       'MozTransition'    : 'transitionend',\n    //       'OTransition'      : 'oTransitionEnd',\n    //       'msTransition'     : 'MSTransitionEnd',\n    //       'transition'       : 'transitionend'\n    //     },\n    //     transEndEventName = transEndEventNames[ Modernizr.prefixed('transition') ];\n    Modernizr.prefixed = function(prop, obj, elem) {\n        if (!obj) return testPropsAll(prop, \"pfx\");\n        else // Testing DOM property e.g. Modernizr.prefixed('requestAnimationFrame', window) // 'mozRequestAnimationFrame'\n        return testPropsAll(prop, obj, elem);\n    };\n    /*>>prefixed*/ /*>>cssclasses*/ // Remove \"no-js\" class from <html> element, if it exists:\n    docElement.className = docElement.className.replace(/(^|\\s)no-js(\\s|$)/, \"$1$2\") + // Add the new classes to the <html> element.\n    (enableClasses ? \" js \" + classes.join(\" \") : \"\");\n    /*>>cssclasses*/ return Modernizr;\n}(this, this.document);\n\n//# sourceMappingURL=index.a8364142.js.map\n","/*!\n * Modernizr v2.7.1\n * www.modernizr.com\n *\n * Copyright (c) Faruk Ates, Paul Irish, Alex Sexton\n * Available under the BSD and MIT licenses: www.modernizr.com/license/\n */\n\n/*\n * Modernizr tests which native CSS3 and HTML5 features are available in\n * the current UA and makes the results available to you in two ways:\n * as properties on a global Modernizr object, and as classes on the\n * <html> element. This information allows you to progressively enhance\n * your pages with a granular level of control over the experience.\n *\n * Modernizr has an optional (not included) conditional resource loader\n * called Modernizr.load(), based on Yepnope.js (yepnopejs.com).\n * To get a build that includes Modernizr.load(), as well as choosing\n * which tests to include, go to www.modernizr.com/download/\n *\n * Authors        Faruk Ates, Paul Irish, Alex Sexton\n * Contributors   Ryan Seddon, Ben Alman\n */\n\nwindow.Modernizr = (function( window, document, undefined ) {\n\n    var version = '2.7.1',\n\n    Modernizr = {},\n\n    /*>>cssclasses*/\n    // option for enabling the HTML classes to be added\n    enableClasses = true,\n    /*>>cssclasses*/\n\n    docElement = document.documentElement,\n\n    /**\n     * Create our \"modernizr\" element that we do most feature tests on.\n     */\n    mod = 'modernizr',\n    modElem = document.createElement(mod),\n    mStyle = modElem.style,\n\n    /**\n     * Create the input element for various Web Forms feature tests.\n     */\n    inputElem /*>>inputelem*/ = document.createElement('input') /*>>inputelem*/ ,\n\n    /*>>smile*/\n    smile = ':)',\n    /*>>smile*/\n\n    toString = {}.toString,\n\n    // TODO :: make the prefixes more granular\n    /*>>prefixes*/\n    // List of property values to set for css tests. See ticket #21\n    prefixes = ' -webkit- -moz- -o- -ms- '.split(' '),\n    /*>>prefixes*/\n\n    /*>>domprefixes*/\n    // Following spec is to expose vendor-specific style properties as:\n    //   elem.style.WebkitBorderRadius\n    // and the following would be incorrect:\n    //   elem.style.webkitBorderRadius\n\n    // Webkit ghosts their properties in lowercase but Opera & Moz do not.\n    // Microsoft uses a lowercase `ms` instead of the correct `Ms` in IE8+\n    //   erik.eae.net/archives/2008/03/10/21.48.10/\n\n    // More here: github.com/Modernizr/Modernizr/issues/issue/21\n    omPrefixes = 'Webkit Moz O ms',\n\n    cssomPrefixes = omPrefixes.split(' '),\n\n    domPrefixes = omPrefixes.toLowerCase().split(' '),\n    /*>>domprefixes*/\n\n    /*>>ns*/\n    ns = {'svg': 'http://www.w3.org/2000/svg'},\n    /*>>ns*/\n\n    tests = {},\n    inputs = {},\n    attrs = {},\n\n    classes = [],\n\n    slice = classes.slice,\n\n    featureName, // used in testing loop\n\n\n    /*>>teststyles*/\n    // Inject element with style element and some CSS rules\n    injectElementWithStyles = function( rule, callback, nodes, testnames ) {\n\n      var style, ret, node, docOverflow,\n          div = document.createElement('div'),\n          // After page load injecting a fake body doesn't work so check if body exists\n          body = document.body,\n          // IE6 and 7 won't return offsetWidth or offsetHeight unless it's in the body element, so we fake it.\n          fakeBody = body || document.createElement('body');\n\n      if ( parseInt(nodes, 10) ) {\n          // In order not to give false positives we create a node for each test\n          // This also allows the method to scale for unspecified uses\n          while ( nodes-- ) {\n              node = document.createElement('div');\n              node.id = testnames ? testnames[nodes] : mod + (nodes + 1);\n              div.appendChild(node);\n          }\n      }\n\n      // <style> elements in IE6-9 are considered 'NoScope' elements and therefore will be removed\n      // when injected with innerHTML. To get around this you need to prepend the 'NoScope' element\n      // with a 'scoped' element, in our case the soft-hyphen entity as it won't mess with our measurements.\n      // msdn.microsoft.com/en-us/library/ms533897%28VS.85%29.aspx\n      // Documents served as xml will throw if using &shy; so use xml friendly encoded version. See issue #277\n      style = ['&#173;','<style id=\"s', mod, '\">', rule, '</style>'].join('');\n      div.id = mod;\n      // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.\n      // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270\n      (body ? div : fakeBody).innerHTML += style;\n      fakeBody.appendChild(div);\n      if ( !body ) {\n          //avoid crashing IE8, if background image is used\n          fakeBody.style.background = '';\n          //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible\n          fakeBody.style.overflow = 'hidden';\n          docOverflow = docElement.style.overflow;\n          docElement.style.overflow = 'hidden';\n          docElement.appendChild(fakeBody);\n      }\n\n      ret = callback(div, rule);\n      // If this is done after page load we don't want to remove the body so check if body exists\n      if ( !body ) {\n          fakeBody.parentNode.removeChild(fakeBody);\n          docElement.style.overflow = docOverflow;\n      } else {\n          div.parentNode.removeChild(div);\n      }\n\n      return !!ret;\n\n    },\n    /*>>teststyles*/\n\n    /*>>mq*/\n    // adapted from matchMedia polyfill\n    // by Scott Jehl and Paul Irish\n    // gist.github.com/786768\n    testMediaQuery = function( mq ) {\n\n      var matchMedia = window.matchMedia || window.msMatchMedia;\n      if ( matchMedia ) {\n        return matchMedia(mq).matches;\n      }\n\n      var bool;\n\n      injectElementWithStyles('@media ' + mq + ' { #' + mod + ' { position: absolute; } }', function( node ) {\n        bool = (window.getComputedStyle ?\n                  getComputedStyle(node, null) :\n                  node.currentStyle)['position'] == 'absolute';\n      });\n\n      return bool;\n\n     },\n     /*>>mq*/\n\n\n    /*>>hasevent*/\n    //\n    // isEventSupported determines if a given element supports the given event\n    // kangax.github.com/iseventsupported/\n    //\n    // The following results are known incorrects:\n    //   Modernizr.hasEvent(\"webkitTransitionEnd\", elem) // false negative\n    //   Modernizr.hasEvent(\"textInput\") // in Webkit. github.com/Modernizr/Modernizr/issues/333\n    //   ...\n    isEventSupported = (function() {\n\n      var TAGNAMES = {\n        'select': 'input', 'change': 'input',\n        'submit': 'form', 'reset': 'form',\n        'error': 'img', 'load': 'img', 'abort': 'img'\n      };\n\n      function isEventSupported( eventName, element ) {\n\n        element = element || document.createElement(TAGNAMES[eventName] || 'div');\n        eventName = 'on' + eventName;\n\n        // When using `setAttribute`, IE skips \"unload\", WebKit skips \"unload\" and \"resize\", whereas `in` \"catches\" those\n        var isSupported = eventName in element;\n\n        if ( !isSupported ) {\n          // If it has no `setAttribute` (i.e. doesn't implement Node interface), try generic element\n          if ( !element.setAttribute ) {\n            element = document.createElement('div');\n          }\n          if ( element.setAttribute && element.removeAttribute ) {\n            element.setAttribute(eventName, '');\n            isSupported = is(element[eventName], 'function');\n\n            // If property was created, \"remove it\" (by setting value to `undefined`)\n            if ( !is(element[eventName], 'undefined') ) {\n              element[eventName] = undefined;\n            }\n            element.removeAttribute(eventName);\n          }\n        }\n\n        element = null;\n        return isSupported;\n      }\n      return isEventSupported;\n    })(),\n    /*>>hasevent*/\n\n    // TODO :: Add flag for hasownprop ? didn't last time\n\n    // hasOwnProperty shim by kangax needed for Safari 2.0 support\n    _hasOwnProperty = ({}).hasOwnProperty, hasOwnProp;\n\n    if ( !is(_hasOwnProperty, 'undefined') && !is(_hasOwnProperty.call, 'undefined') ) {\n      hasOwnProp = function (object, property) {\n        return _hasOwnProperty.call(object, property);\n      };\n    }\n    else {\n      hasOwnProp = function (object, property) { /* yes, this can give false positives/negatives, but most of the time we don't care about those */\n        return ((property in object) && is(object.constructor.prototype[property], 'undefined'));\n      };\n    }\n\n    // Adapted from ES5-shim https://github.com/kriskowal/es5-shim/blob/master/es5-shim.js\n    // es5.github.com/#x15.3.4.5\n\n    if (!Function.prototype.bind) {\n      Function.prototype.bind = function bind(that) {\n\n        var target = this;\n\n        if (typeof target != \"function\") {\n            throw new TypeError();\n        }\n\n        var args = slice.call(arguments, 1),\n            bound = function () {\n\n            if (this instanceof bound) {\n\n              var F = function(){};\n              F.prototype = target.prototype;\n              var self = new F();\n\n              var result = target.apply(\n                  self,\n                  args.concat(slice.call(arguments))\n              );\n              if (Object(result) === result) {\n                  return result;\n              }\n              return self;\n\n            } else {\n\n              return target.apply(\n                  that,\n                  args.concat(slice.call(arguments))\n              );\n\n            }\n\n        };\n\n        return bound;\n      };\n    }\n\n    /**\n     * setCss applies given styles to the Modernizr DOM node.\n     */\n    function setCss( str ) {\n        mStyle.cssText = str;\n    }\n\n    /**\n     * setCssAll extrapolates all vendor-specific css strings.\n     */\n    function setCssAll( str1, str2 ) {\n        return setCss(prefixes.join(str1 + ';') + ( str2 || '' ));\n    }\n\n    /**\n     * is returns a boolean for if typeof obj is exactly type.\n     */\n    function is( obj, type ) {\n        return typeof obj === type;\n    }\n\n    /**\n     * contains returns a boolean for if substr is found within str.\n     */\n    function contains( str, substr ) {\n        return !!~('' + str).indexOf(substr);\n    }\n\n    /*>>testprop*/\n\n    // testProps is a generic CSS / DOM property test.\n\n    // In testing support for a given CSS property, it's legit to test:\n    //    `elem.style[styleName] !== undefined`\n    // If the property is supported it will return an empty string,\n    // if unsupported it will return undefined.\n\n    // We'll take advantage of this quick test and skip setting a style\n    // on our modernizr element, but instead just testing undefined vs\n    // empty string.\n\n    // Because the testing of the CSS property names (with \"-\", as\n    // opposed to the camelCase DOM properties) is non-portable and\n    // non-standard but works in WebKit and IE (but not Gecko or Opera),\n    // we explicitly reject properties with dashes so that authors\n    // developing in WebKit or IE first don't end up with\n    // browser-specific content by accident.\n\n    function testProps( props, prefixed ) {\n        for ( var i in props ) {\n            var prop = props[i];\n            if ( !contains(prop, \"-\") && mStyle[prop] !== undefined ) {\n                return prefixed == 'pfx' ? prop : true;\n            }\n        }\n        return false;\n    }\n    /*>>testprop*/\n\n    // TODO :: add testDOMProps\n    /**\n     * testDOMProps is a generic DOM property test; if a browser supports\n     *   a certain property, it won't return undefined for it.\n     */\n    function testDOMProps( props, obj, elem ) {\n        for ( var i in props ) {\n            var item = obj[props[i]];\n            if ( item !== undefined) {\n\n                // return the property name as a string\n                if (elem === false) return props[i];\n\n                // let's bind a function\n                if (is(item, 'function')){\n                  // default to autobind unless override\n                  return item.bind(elem || obj);\n                }\n\n                // return the unbound function or obj or value\n                return item;\n            }\n        }\n        return false;\n    }\n\n    /*>>testallprops*/\n    /**\n     * testPropsAll tests a list of DOM properties we want to check against.\n     *   We specify literally ALL possible (known and/or likely) properties on\n     *   the element including the non-vendor prefixed one, for forward-\n     *   compatibility.\n     */\n    function testPropsAll( prop, prefixed, elem ) {\n\n        var ucProp  = prop.charAt(0).toUpperCase() + prop.slice(1),\n            props   = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');\n\n        // did they call .prefixed('boxSizing') or are we just testing a prop?\n        if(is(prefixed, \"string\") || is(prefixed, \"undefined\")) {\n          return testProps(props, prefixed);\n\n        // otherwise, they called .prefixed('requestAnimationFrame', window[, elem])\n        } else {\n          props = (prop + ' ' + (domPrefixes).join(ucProp + ' ') + ucProp).split(' ');\n          return testDOMProps(props, prefixed, elem);\n        }\n    }\n    /*>>testallprops*/\n\n\n    /**\n     * Tests\n     * -----\n     */\n\n    // The *new* flexbox\n    // dev.w3.org/csswg/css3-flexbox\n\n    tests['flexbox'] = function() {\n      return testPropsAll('flexWrap');\n    };\n\n    // The *old* flexbox\n    // www.w3.org/TR/2009/WD-css3-flexbox-20090723/\n\n    tests['flexboxlegacy'] = function() {\n        return testPropsAll('boxDirection');\n    };\n\n    // On the S60 and BB Storm, getContext exists, but always returns undefined\n    // so we actually have to call getContext() to verify\n    // github.com/Modernizr/Modernizr/issues/issue/97/\n\n    tests['canvas'] = function() {\n        var elem = document.createElement('canvas');\n        return !!(elem.getContext && elem.getContext('2d'));\n    };\n\n    tests['canvastext'] = function() {\n        return !!(Modernizr['canvas'] && is(document.createElement('canvas').getContext('2d').fillText, 'function'));\n    };\n\n    // webk.it/70117 is tracking a legit WebGL feature detect proposal\n\n    // We do a soft detect which may false positive in order to avoid\n    // an expensive context creation: bugzil.la/732441\n\n    tests['webgl'] = function() {\n        return !!window.WebGLRenderingContext;\n    };\n\n    /*\n     * The Modernizr.touch test only indicates if the browser supports\n     *    touch events, which does not necessarily reflect a touchscreen\n     *    device, as evidenced by tablets running Windows 7 or, alas,\n     *    the Palm Pre / WebOS (touch) phones.\n     *\n     * Additionally, Chrome (desktop) used to lie about its support on this,\n     *    but that has since been rectified: crbug.com/36415\n     *\n     * We also test for Firefox 4 Multitouch Support.\n     *\n     * For more info, see: modernizr.github.com/Modernizr/touch.html\n     */\n\n    tests['touch'] = function() {\n        var bool;\n\n        if(('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch) {\n          bool = true;\n        } else {\n          injectElementWithStyles(['@media (',prefixes.join('touch-enabled),('),mod,')','{#modernizr{top:9px;position:absolute}}'].join(''), function( node ) {\n            bool = node.offsetTop === 9;\n          });\n        }\n\n        return bool;\n    };\n\n\n    // geolocation is often considered a trivial feature detect...\n    // Turns out, it's quite tricky to get right:\n    //\n    // Using !!navigator.geolocation does two things we don't want. It:\n    //   1. Leaks memory in IE9: github.com/Modernizr/Modernizr/issues/513\n    //   2. Disables page caching in WebKit: webk.it/43956\n    //\n    // Meanwhile, in Firefox < 8, an about:config setting could expose\n    // a false positive that would throw an exception: bugzil.la/688158\n\n    tests['geolocation'] = function() {\n        return 'geolocation' in navigator;\n    };\n\n\n    tests['postmessage'] = function() {\n      return !!window.postMessage;\n    };\n\n\n    // Chrome incognito mode used to throw an exception when using openDatabase\n    // It doesn't anymore.\n    tests['websqldatabase'] = function() {\n      return !!window.openDatabase;\n    };\n\n    // Vendors had inconsistent prefixing with the experimental Indexed DB:\n    // - Webkit's implementation is accessible through webkitIndexedDB\n    // - Firefox shipped moz_indexedDB before FF4b9, but since then has been mozIndexedDB\n    // For speed, we don't test the legacy (and beta-only) indexedDB\n    tests['indexedDB'] = function() {\n      return !!testPropsAll(\"indexedDB\", window);\n    };\n\n    // documentMode logic from YUI to filter out IE8 Compat Mode\n    //   which false positives.\n    tests['hashchange'] = function() {\n      return isEventSupported('hashchange', window) && (document.documentMode === undefined || document.documentMode > 7);\n    };\n\n    // Per 1.6:\n    // This used to be Modernizr.historymanagement but the longer\n    // name has been deprecated in favor of a shorter and property-matching one.\n    // The old API is still available in 1.6, but as of 2.0 will throw a warning,\n    // and in the first release thereafter disappear entirely.\n    tests['history'] = function() {\n      return !!(window.history && history.pushState);\n    };\n\n    tests['draganddrop'] = function() {\n        var div = document.createElement('div');\n        return ('draggable' in div) || ('ondragstart' in div && 'ondrop' in div);\n    };\n\n    // FF3.6 was EOL'ed on 4/24/12, but the ESR version of FF10\n    // will be supported until FF19 (2/12/13), at which time, ESR becomes FF17.\n    // FF10 still uses prefixes, so check for it until then.\n    // for more ESR info, see: mozilla.org/en-US/firefox/organizations/faq/\n    tests['websockets'] = function() {\n        return 'WebSocket' in window || 'MozWebSocket' in window;\n    };\n\n\n    // css-tricks.com/rgba-browser-support/\n    tests['rgba'] = function() {\n        // Set an rgba() color and check the returned value\n\n        setCss('background-color:rgba(150,255,150,.5)');\n\n        return contains(mStyle.backgroundColor, 'rgba');\n    };\n\n    tests['hsla'] = function() {\n        // Same as rgba(), in fact, browsers re-map hsla() to rgba() internally,\n        //   except IE9 who retains it as hsla\n\n        setCss('background-color:hsla(120,40%,100%,.5)');\n\n        return contains(mStyle.backgroundColor, 'rgba') || contains(mStyle.backgroundColor, 'hsla');\n    };\n\n    tests['multiplebgs'] = function() {\n        // Setting multiple images AND a color on the background shorthand property\n        //  and then querying the style.background property value for the number of\n        //  occurrences of \"url(\" is a reliable method for detecting ACTUAL support for this!\n\n        setCss('background:url(https://),url(https://),red url(https://)');\n\n        // If the UA supports multiple backgrounds, there should be three occurrences\n        //   of the string \"url(\" in the return value for elemStyle.background\n\n        return (/(url\\s*\\(.*?){3}/).test(mStyle.background);\n    };\n\n\n\n    // this will false positive in Opera Mini\n    //   github.com/Modernizr/Modernizr/issues/396\n\n    tests['backgroundsize'] = function() {\n        return testPropsAll('backgroundSize');\n    };\n\n    tests['borderimage'] = function() {\n        return testPropsAll('borderImage');\n    };\n\n\n    // Super comprehensive table about all the unique implementations of\n    // border-radius: muddledramblings.com/table-of-css3-border-radius-compliance\n\n    tests['borderradius'] = function() {\n        return testPropsAll('borderRadius');\n    };\n\n    // WebOS unfortunately false positives on this test.\n    tests['boxshadow'] = function() {\n        return testPropsAll('boxShadow');\n    };\n\n    // FF3.0 will false positive on this test\n    tests['textshadow'] = function() {\n        return document.createElement('div').style.textShadow === '';\n    };\n\n\n    tests['opacity'] = function() {\n        // Browsers that actually have CSS Opacity implemented have done so\n        //  according to spec, which means their return values are within the\n        //  range of [0.0,1.0] - including the leading zero.\n\n        setCssAll('opacity:.55');\n\n        // The non-literal . in this regex is intentional:\n        //   German Chrome returns this value as 0,55\n        // github.com/Modernizr/Modernizr/issues/#issue/59/comment/516632\n        return (/^0.55$/).test(mStyle.opacity);\n    };\n\n\n    // Note, Android < 4 will pass this test, but can only animate\n    //   a single property at a time\n    //   daneden.me/2011/12/putting-up-with-androids-bullshit/\n    tests['cssanimations'] = function() {\n        return testPropsAll('animationName');\n    };\n\n\n    tests['csscolumns'] = function() {\n        return testPropsAll('columnCount');\n    };\n\n\n    tests['cssgradients'] = function() {\n        /**\n         * For CSS Gradients syntax, please see:\n         * webkit.org/blog/175/introducing-css-gradients/\n         * developer.mozilla.org/en/CSS/-moz-linear-gradient\n         * developer.mozilla.org/en/CSS/-moz-radial-gradient\n         * dev.w3.org/csswg/css3-images/#gradients-\n         */\n\n        var str1 = 'background-image:',\n            str2 = 'gradient(linear,left top,right bottom,from(#9f9),to(white));',\n            str3 = 'linear-gradient(left top,#9f9, white);';\n\n        setCss(\n             // legacy webkit syntax (FIXME: remove when syntax not in use anymore)\n              (str1 + '-webkit- '.split(' ').join(str2 + str1) +\n             // standard syntax             // trailing 'background-image:'\n              prefixes.join(str3 + str1)).slice(0, -str1.length)\n        );\n\n        return contains(mStyle.backgroundImage, 'gradient');\n    };\n\n\n    tests['cssreflections'] = function() {\n        return testPropsAll('boxReflect');\n    };\n\n\n    tests['csstransforms'] = function() {\n        return !!testPropsAll('transform');\n    };\n\n\n    tests['csstransforms3d'] = function() {\n\n        var ret = !!testPropsAll('perspective');\n\n        // Webkit's 3D transforms are passed off to the browser's own graphics renderer.\n        //   It works fine in Safari on Leopard and Snow Leopard, but not in Chrome in\n        //   some conditions. As a result, Webkit typically recognizes the syntax but\n        //   will sometimes throw a false positive, thus we must do a more thorough check:\n        if ( ret && 'webkitPerspective' in docElement.style ) {\n\n          // Webkit allows this media query to succeed only if the feature is enabled.\n          // `@media (transform-3d),(-webkit-transform-3d){ ... }`\n          injectElementWithStyles('@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}', function( node, rule ) {\n            ret = node.offsetLeft === 9 && node.offsetHeight === 3;\n          });\n        }\n        return ret;\n    };\n\n\n    tests['csstransitions'] = function() {\n        return testPropsAll('transition');\n    };\n\n\n    /*>>fontface*/\n    // @font-face detection routine by Diego Perini\n    // javascript.nwbox.com/CSSSupport/\n\n    // false positives:\n    //   WebOS github.com/Modernizr/Modernizr/issues/342\n    //   WP7   github.com/Modernizr/Modernizr/issues/538\n    tests['fontface'] = function() {\n        var bool;\n\n        injectElementWithStyles('@font-face {font-family:\"font\";src:url(\"https://\")}', function( node, rule ) {\n          var style = document.getElementById('smodernizr'),\n              sheet = style.sheet || style.styleSheet,\n              cssText = sheet ? (sheet.cssRules && sheet.cssRules[0] ? sheet.cssRules[0].cssText : sheet.cssText || '') : '';\n\n          bool = /src/i.test(cssText) && cssText.indexOf(rule.split(' ')[0]) === 0;\n        });\n\n        return bool;\n    };\n    /*>>fontface*/\n\n    // CSS generated content detection\n    tests['generatedcontent'] = function() {\n        var bool;\n\n        injectElementWithStyles(['#',mod,'{font:0/0 a}#',mod,':after{content:\"',smile,'\";visibility:hidden;font:3px/1 a}'].join(''), function( node ) {\n          bool = node.offsetHeight >= 3;\n        });\n\n        return bool;\n    };\n\n\n\n    // These tests evaluate support of the video/audio elements, as well as\n    // testing what types of content they support.\n    //\n    // We're using the Boolean constructor here, so that we can extend the value\n    // e.g.  Modernizr.video     // true\n    //       Modernizr.video.ogg // 'probably'\n    //\n    // Codec values from : github.com/NielsLeenheer/html5test/blob/9106a8/index.html#L845\n    //                     thx to NielsLeenheer and zcorpan\n\n    // Note: in some older browsers, \"no\" was a return value instead of empty string.\n    //   It was live in FF3.5.0 and 3.5.1, but fixed in 3.5.2\n    //   It was also live in Safari 4.0.0 - 4.0.4, but fixed in 4.0.5\n\n    tests['video'] = function() {\n        var elem = document.createElement('video'),\n            bool = false;\n\n        // IE9 Running on Windows Server SKU can cause an exception to be thrown, bug #224\n        try {\n            if ( bool = !!elem.canPlayType ) {\n                bool      = new Boolean(bool);\n                bool.ogg  = elem.canPlayType('video/ogg; codecs=\"theora\"')      .replace(/^no$/,'');\n\n                // Without QuickTime, this value will be `undefined`. github.com/Modernizr/Modernizr/issues/546\n                bool.h264 = elem.canPlayType('video/mp4; codecs=\"avc1.42E01E\"') .replace(/^no$/,'');\n\n                bool.webm = elem.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/^no$/,'');\n            }\n\n        } catch(e) { }\n\n        return bool;\n    };\n\n    tests['audio'] = function() {\n        var elem = document.createElement('audio'),\n            bool = false;\n\n        try {\n            if ( bool = !!elem.canPlayType ) {\n                bool      = new Boolean(bool);\n                bool.ogg  = elem.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/,'');\n                bool.mp3  = elem.canPlayType('audio/mpeg;')               .replace(/^no$/,'');\n\n                // Mimetypes accepted:\n                //   developer.mozilla.org/En/Media_formats_supported_by_the_audio_and_video_elements\n                //   bit.ly/iphoneoscodecs\n                bool.wav  = elem.canPlayType('audio/wav; codecs=\"1\"')     .replace(/^no$/,'');\n                bool.m4a  = ( elem.canPlayType('audio/x-m4a;')            ||\n                              elem.canPlayType('audio/aac;'))             .replace(/^no$/,'');\n            }\n        } catch(e) { }\n\n        return bool;\n    };\n\n\n    // In FF4, if disabled, window.localStorage should === null.\n\n    // Normally, we could not test that directly and need to do a\n    //   `('localStorage' in window) && ` test first because otherwise Firefox will\n    //   throw bugzil.la/365772 if cookies are disabled\n\n    // Also in iOS5 Private Browsing mode, attempting to use localStorage.setItem\n    // will throw the exception:\n    //   QUOTA_EXCEEDED_ERRROR DOM Exception 22.\n    // Peculiarly, getItem and removeItem calls do not throw.\n\n    // Because we are forced to try/catch this, we'll go aggressive.\n\n    // Just FWIW: IE8 Compat mode supports these features completely:\n    //   www.quirksmode.org/dom/html5.html\n    // But IE8 doesn't support either with local files\n\n    tests['localstorage'] = function() {\n        try {\n            localStorage.setItem(mod, mod);\n            localStorage.removeItem(mod);\n            return true;\n        } catch(e) {\n            return false;\n        }\n    };\n\n    tests['sessionstorage'] = function() {\n        try {\n            sessionStorage.setItem(mod, mod);\n            sessionStorage.removeItem(mod);\n            return true;\n        } catch(e) {\n            return false;\n        }\n    };\n\n\n    tests['webworkers'] = function() {\n        return !!window.Worker;\n    };\n\n\n    tests['applicationcache'] = function() {\n        return !!window.applicationCache;\n    };\n\n\n    // Thanks to Erik Dahlstrom\n    tests['svg'] = function() {\n        return !!document.createElementNS && !!document.createElementNS(ns.svg, 'svg').createSVGRect;\n    };\n\n    // specifically for SVG inline in HTML, not within XHTML\n    // test page: paulirish.com/demo/inline-svg\n    tests['inlinesvg'] = function() {\n      var div = document.createElement('div');\n      div.innerHTML = '<svg/>';\n      return (div.firstChild && div.firstChild.namespaceURI) == ns.svg;\n    };\n\n    // SVG SMIL animation\n    tests['smil'] = function() {\n        return !!document.createElementNS && /SVGAnimate/.test(toString.call(document.createElementNS(ns.svg, 'animate')));\n    };\n\n    // This test is only for clip paths in SVG proper, not clip paths on HTML content\n    // demo: srufaculty.sru.edu/david.dailey/svg/newstuff/clipPath4.svg\n\n    // However read the comments to dig into applying SVG clippaths to HTML content here:\n    //   github.com/Modernizr/Modernizr/issues/213#issuecomment-1149491\n    tests['svgclippaths'] = function() {\n        return !!document.createElementNS && /SVGClipPath/.test(toString.call(document.createElementNS(ns.svg, 'clipPath')));\n    };\n\n    /*>>webforms*/\n    // input features and input types go directly onto the ret object, bypassing the tests loop.\n    // Hold this guy to execute in a moment.\n    function webforms() {\n        /*>>input*/\n        // Run through HTML5's new input attributes to see if the UA understands any.\n        // We're using f which is the <input> element created early on\n        // Mike Taylr has created a comprehensive resource for testing these attributes\n        //   when applied to all input types:\n        //   miketaylr.com/code/input-type-attr.html\n        // spec: www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary\n\n        // Only input placeholder is tested while textarea's placeholder is not.\n        // Currently Safari 4 and Opera 11 have support only for the input placeholder\n        // Both tests are available in feature-detects/forms-placeholder.js\n        Modernizr['input'] = (function( props ) {\n            for ( var i = 0, len = props.length; i < len; i++ ) {\n                attrs[ props[i] ] = !!(props[i] in inputElem);\n            }\n            if (attrs.list){\n              // safari false positive's on datalist: webk.it/74252\n              // see also github.com/Modernizr/Modernizr/issues/146\n              attrs.list = !!(document.createElement('datalist') && window.HTMLDataListElement);\n            }\n            return attrs;\n        })('autocomplete autofocus list placeholder max min multiple pattern required step'.split(' '));\n        /*>>input*/\n\n        /*>>inputtypes*/\n        // Run through HTML5's new input types to see if the UA understands any.\n        //   This is put behind the tests runloop because it doesn't return a\n        //   true/false like all the other tests; instead, it returns an object\n        //   containing each input type with its corresponding true/false value\n\n        // Big thanks to @miketaylr for the html5 forms expertise. miketaylr.com/\n        Modernizr['inputtypes'] = (function(props) {\n\n            for ( var i = 0, bool, inputElemType, defaultView, len = props.length; i < len; i++ ) {\n\n                inputElem.setAttribute('type', inputElemType = props[i]);\n                bool = inputElem.type !== 'text';\n\n                // We first check to see if the type we give it sticks..\n                // If the type does, we feed it a textual value, which shouldn't be valid.\n                // If the value doesn't stick, we know there's input sanitization which infers a custom UI\n                if ( bool ) {\n\n                    inputElem.value         = smile;\n                    inputElem.style.cssText = 'position:absolute;visibility:hidden;';\n\n                    if ( /^range$/.test(inputElemType) && inputElem.style.WebkitAppearance !== undefined ) {\n\n                      docElement.appendChild(inputElem);\n                      defaultView = document.defaultView;\n\n                      // Safari 2-4 allows the smiley as a value, despite making a slider\n                      bool =  defaultView.getComputedStyle &&\n                              defaultView.getComputedStyle(inputElem, null).WebkitAppearance !== 'textfield' &&\n                              // Mobile android web browser has false positive, so must\n                              // check the height to see if the widget is actually there.\n                              (inputElem.offsetHeight !== 0);\n\n                      docElement.removeChild(inputElem);\n\n                    } else if ( /^(search|tel)$/.test(inputElemType) ){\n                      // Spec doesn't define any special parsing or detectable UI\n                      //   behaviors so we pass these through as true\n\n                      // Interestingly, opera fails the earlier test, so it doesn't\n                      //  even make it here.\n\n                    } else if ( /^(url|email)$/.test(inputElemType) ) {\n                      // Real url and email support comes with prebaked validation.\n                      bool = inputElem.checkValidity && inputElem.checkValidity() === false;\n\n                    } else {\n                      // If the upgraded input compontent rejects the :) text, we got a winner\n                      bool = inputElem.value != smile;\n                    }\n                }\n\n                inputs[ props[i] ] = !!bool;\n            }\n            return inputs;\n        })('search tel url email datetime date month week time datetime-local number range color'.split(' '));\n        /*>>inputtypes*/\n    }\n    /*>>webforms*/\n\n\n    // End of test definitions\n    // -----------------------\n\n\n\n    // Run through all tests and detect their support in the current UA.\n    // todo: hypothetically we could be doing an array of tests and use a basic loop here.\n    for ( var feature in tests ) {\n        if ( hasOwnProp(tests, feature) ) {\n            // run the test, throw the return value into the Modernizr,\n            //   then based on that boolean, define an appropriate className\n            //   and push it into an array of classes we'll join later.\n            featureName  = feature.toLowerCase();\n            Modernizr[featureName] = tests[feature]();\n\n            classes.push((Modernizr[featureName] ? '' : 'no-') + featureName);\n        }\n    }\n\n    /*>>webforms*/\n    // input tests need to run.\n    Modernizr.input || webforms();\n    /*>>webforms*/\n\n\n    /**\n     * addTest allows the user to define their own feature tests\n     * the result will be added onto the Modernizr object,\n     * as well as an appropriate className set on the html element\n     *\n     * @param feature - String naming the feature\n     * @param test - Function returning true if feature is supported, false if not\n     */\n     Modernizr.addTest = function ( feature, test ) {\n       if ( typeof feature == 'object' ) {\n         for ( var key in feature ) {\n           if ( hasOwnProp( feature, key ) ) {\n             Modernizr.addTest( key, feature[ key ] );\n           }\n         }\n       } else {\n\n         feature = feature.toLowerCase();\n\n         if ( Modernizr[feature] !== undefined ) {\n           // we're going to quit if you're trying to overwrite an existing test\n           // if we were to allow it, we'd do this:\n           //   var re = new RegExp(\"\\\\b(no-)?\" + feature + \"\\\\b\");\n           //   docElement.className = docElement.className.replace( re, '' );\n           // but, no rly, stuff 'em.\n           return Modernizr;\n         }\n\n         test = typeof test == 'function' ? test() : test;\n\n         if (typeof enableClasses !== \"undefined\" && enableClasses) {\n           docElement.className += ' ' + (test ? '' : 'no-') + feature;\n         }\n         Modernizr[feature] = test;\n\n       }\n\n       return Modernizr; // allow chaining.\n     };\n\n\n    // Reset modElem.cssText to nothing to reduce memory footprint.\n    setCss('');\n    modElem = inputElem = null;\n\n    /*>>shiv*/\n    /**\n     * @preserve HTML5 Shiv prev3.7.1 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed\n     */\n    ;(function(window, document) {\n        /*jshint evil:true */\n        /** version */\n        var version = '3.7.0';\n\n        /** Preset options */\n        var options = window.html5 || {};\n\n        /** Used to skip problem elements */\n        var reSkip = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i;\n\n        /** Not all elements can be cloned in IE **/\n        var saveClones = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i;\n\n        /** Detect whether the browser supports default html5 styles */\n        var supportsHtml5Styles;\n\n        /** Name of the expando, to work with multiple documents or to re-shiv one document */\n        var expando = '_html5shiv';\n\n        /** The id for the the documents expando */\n        var expanID = 0;\n\n        /** Cached data for each document */\n        var expandoData = {};\n\n        /** Detect whether the browser supports unknown elements */\n        var supportsUnknownElements;\n\n        (function() {\n          try {\n            var a = document.createElement('a');\n            a.innerHTML = '<xyz></xyz>';\n            //if the hidden property is implemented we can assume, that the browser supports basic HTML5 Styles\n            supportsHtml5Styles = ('hidden' in a);\n\n            supportsUnknownElements = a.childNodes.length == 1 || (function() {\n              // assign a false positive if unable to shiv\n              (document.createElement)('a');\n              var frag = document.createDocumentFragment();\n              return (\n                typeof frag.cloneNode == 'undefined' ||\n                typeof frag.createDocumentFragment == 'undefined' ||\n                typeof frag.createElement == 'undefined'\n              );\n            }());\n          } catch(e) {\n            // assign a false positive if detection fails => unable to shiv\n            supportsHtml5Styles = true;\n            supportsUnknownElements = true;\n          }\n\n        }());\n\n        /*--------------------------------------------------------------------------*/\n\n        /**\n         * Creates a style sheet with the given CSS text and adds it to the document.\n         * @private\n         * @param {Document} ownerDocument The document.\n         * @param {String} cssText The CSS text.\n         * @returns {StyleSheet} The style element.\n         */\n        function addStyleSheet(ownerDocument, cssText) {\n          var p = ownerDocument.createElement('p'),\n          parent = ownerDocument.getElementsByTagName('head')[0] || ownerDocument.documentElement;\n\n          p.innerHTML = 'x<style>' + cssText + '</style>';\n          return parent.insertBefore(p.lastChild, parent.firstChild);\n        }\n\n        /**\n         * Returns the value of `html5.elements` as an array.\n         * @private\n         * @returns {Array} An array of shived element node names.\n         */\n        function getElements() {\n          var elements = html5.elements;\n          return typeof elements == 'string' ? elements.split(' ') : elements;\n        }\n\n        /**\n         * Returns the data associated to the given document\n         * @private\n         * @param {Document} ownerDocument The document.\n         * @returns {Object} An object of data.\n         */\n        function getExpandoData(ownerDocument) {\n          var data = expandoData[ownerDocument[expando]];\n          if (!data) {\n            data = {};\n            expanID++;\n            ownerDocument[expando] = expanID;\n            expandoData[expanID] = data;\n          }\n          return data;\n        }\n\n        /**\n         * returns a shived element for the given nodeName and document\n         * @memberOf html5\n         * @param {String} nodeName name of the element\n         * @param {Document} ownerDocument The context document.\n         * @returns {Object} The shived element.\n         */\n        function createElement(nodeName, ownerDocument, data){\n          if (!ownerDocument) {\n            ownerDocument = document;\n          }\n          if(supportsUnknownElements){\n            return ownerDocument.createElement(nodeName);\n          }\n          if (!data) {\n            data = getExpandoData(ownerDocument);\n          }\n          var node;\n\n          if (data.cache[nodeName]) {\n            node = data.cache[nodeName].cloneNode();\n          } else if (saveClones.test(nodeName)) {\n            node = (data.cache[nodeName] = data.createElem(nodeName)).cloneNode();\n          } else {\n            node = data.createElem(nodeName);\n          }\n\n          // Avoid adding some elements to fragments in IE < 9 because\n          // * Attributes like `name` or `type` cannot be set/changed once an element\n          //   is inserted into a document/fragment\n          // * Link elements with `src` attributes that are inaccessible, as with\n          //   a 403 response, will cause the tab/window to crash\n          // * Script elements appended to fragments will execute when their `src`\n          //   or `text` property is set\n          return node.canHaveChildren && !reSkip.test(nodeName) && !node.tagUrn ? data.frag.appendChild(node) : node;\n        }\n\n        /**\n         * returns a shived DocumentFragment for the given document\n         * @memberOf html5\n         * @param {Document} ownerDocument The context document.\n         * @returns {Object} The shived DocumentFragment.\n         */\n        function createDocumentFragment(ownerDocument, data){\n          if (!ownerDocument) {\n            ownerDocument = document;\n          }\n          if(supportsUnknownElements){\n            return ownerDocument.createDocumentFragment();\n          }\n          data = data || getExpandoData(ownerDocument);\n          var clone = data.frag.cloneNode(),\n          i = 0,\n          elems = getElements(),\n          l = elems.length;\n          for(;i<l;i++){\n            clone.createElement(elems[i]);\n          }\n          return clone;\n        }\n\n        /**\n         * Shivs the `createElement` and `createDocumentFragment` methods of the document.\n         * @private\n         * @param {Document|DocumentFragment} ownerDocument The document.\n         * @param {Object} data of the document.\n         */\n        function shivMethods(ownerDocument, data) {\n          if (!data.cache) {\n            data.cache = {};\n            data.createElem = ownerDocument.createElement;\n            data.createFrag = ownerDocument.createDocumentFragment;\n            data.frag = data.createFrag();\n          }\n\n\n          ownerDocument.createElement = function(nodeName) {\n            //abort shiv\n            if (!html5.shivMethods) {\n              return data.createElem(nodeName);\n            }\n            return createElement(nodeName, ownerDocument, data);\n          };\n\n          ownerDocument.createDocumentFragment = Function('h,f', 'return function(){' +\n                                                          'var n=f.cloneNode(),c=n.createElement;' +\n                                                          'h.shivMethods&&(' +\n                                                          // unroll the `createElement` calls\n                                                          getElements().join().replace(/[\\w\\-]+/g, function(nodeName) {\n            data.createElem(nodeName);\n            data.frag.createElement(nodeName);\n            return 'c(\"' + nodeName + '\")';\n          }) +\n            ');return n}'\n                                                         )(html5, data.frag);\n        }\n\n        /*--------------------------------------------------------------------------*/\n\n        /**\n         * Shivs the given document.\n         * @memberOf html5\n         * @param {Document} ownerDocument The document to shiv.\n         * @returns {Document} The shived document.\n         */\n        function shivDocument(ownerDocument) {\n          if (!ownerDocument) {\n            ownerDocument = document;\n          }\n          var data = getExpandoData(ownerDocument);\n\n          if (html5.shivCSS && !supportsHtml5Styles && !data.hasCSS) {\n            data.hasCSS = !!addStyleSheet(ownerDocument,\n                                          // corrects block display not defined in IE6/7/8/9\n                                          'article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}' +\n                                            // adds styling not present in IE6/7/8/9\n                                            'mark{background:#FF0;color:#000}' +\n                                            // hides non-rendered elements\n                                            'template{display:none}'\n                                         );\n          }\n          if (!supportsUnknownElements) {\n            shivMethods(ownerDocument, data);\n          }\n          return ownerDocument;\n        }\n\n        /*--------------------------------------------------------------------------*/\n\n        /**\n         * The `html5` object is exposed so that more elements can be shived and\n         * existing shiving can be detected on iframes.\n         * @type Object\n         * @example\n         *\n         * // options can be changed before the script is included\n         * html5 = { 'elements': 'mark section', 'shivCSS': false, 'shivMethods': false };\n         */\n        var html5 = {\n\n          /**\n           * An array or space separated string of node names of the elements to shiv.\n           * @memberOf html5\n           * @type Array|String\n           */\n          'elements': options.elements || 'abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video',\n\n          /**\n           * current version of html5shiv\n           */\n          'version': version,\n\n          /**\n           * A flag to indicate that the HTML5 style sheet should be inserted.\n           * @memberOf html5\n           * @type Boolean\n           */\n          'shivCSS': (options.shivCSS !== false),\n\n          /**\n           * Is equal to true if a browser supports creating unknown/HTML5 elements\n           * @memberOf html5\n           * @type boolean\n           */\n          'supportsUnknownElements': supportsUnknownElements,\n\n          /**\n           * A flag to indicate that the document's `createElement` and `createDocumentFragment`\n           * methods should be overwritten.\n           * @memberOf html5\n           * @type Boolean\n           */\n          'shivMethods': (options.shivMethods !== false),\n\n          /**\n           * A string to describe the type of `html5` object (\"default\" or \"default print\").\n           * @memberOf html5\n           * @type String\n           */\n          'type': 'default',\n\n          // shivs the document according to the specified `html5` object options\n          'shivDocument': shivDocument,\n\n          //creates a shived element\n          createElement: createElement,\n\n          //creates a shived documentFragment\n          createDocumentFragment: createDocumentFragment\n        };\n\n        /*--------------------------------------------------------------------------*/\n\n        // expose html5\n        window.html5 = html5;\n\n        // shiv the document\n        shivDocument(document);\n\n    }(this, document));\n    /*>>shiv*/\n\n    // Assign private properties to the return object with prefix\n    Modernizr._version      = version;\n\n    // expose these for the plugin API. Look in the source for how to join() them against your input\n    /*>>prefixes*/\n    Modernizr._prefixes     = prefixes;\n    /*>>prefixes*/\n    /*>>domprefixes*/\n    Modernizr._domPrefixes  = domPrefixes;\n    Modernizr._cssomPrefixes  = cssomPrefixes;\n    /*>>domprefixes*/\n\n    /*>>mq*/\n    // Modernizr.mq tests a given media query, live against the current state of the window\n    // A few important notes:\n    //   * If a browser does not support media queries at all (eg. oldIE) the mq() will always return false\n    //   * A max-width or orientation query will be evaluated against the current state, which may change later.\n    //   * You must specify values. Eg. If you are testing support for the min-width media query use:\n    //       Modernizr.mq('(min-width:0)')\n    // usage:\n    // Modernizr.mq('only screen and (max-width:768)')\n    Modernizr.mq            = testMediaQuery;\n    /*>>mq*/\n\n    /*>>hasevent*/\n    // Modernizr.hasEvent() detects support for a given event, with an optional element to test on\n    // Modernizr.hasEvent('gesturestart', elem)\n    Modernizr.hasEvent      = isEventSupported;\n    /*>>hasevent*/\n\n    /*>>testprop*/\n    // Modernizr.testProp() investigates whether a given style property is recognized\n    // Note that the property names must be provided in the camelCase variant.\n    // Modernizr.testProp('pointerEvents')\n    Modernizr.testProp      = function(prop){\n        return testProps([prop]);\n    };\n    /*>>testprop*/\n\n    /*>>testallprops*/\n    // Modernizr.testAllProps() investigates whether a given style property,\n    //   or any of its vendor-prefixed variants, is recognized\n    // Note that the property names must be provided in the camelCase variant.\n    // Modernizr.testAllProps('boxSizing')\n    Modernizr.testAllProps  = testPropsAll;\n    /*>>testallprops*/\n\n\n    /*>>teststyles*/\n    // Modernizr.testStyles() allows you to add custom styles to the document and test an element afterwards\n    // Modernizr.testStyles('#modernizr { position:absolute }', function(elem, rule){ ... })\n    Modernizr.testStyles    = injectElementWithStyles;\n    /*>>teststyles*/\n\n\n    /*>>prefixed*/\n    // Modernizr.prefixed() returns the prefixed or nonprefixed property name variant of your input\n    // Modernizr.prefixed('boxSizing') // 'MozBoxSizing'\n\n    // Properties must be passed as dom-style camelcase, rather than `box-sizing` hypentated style.\n    // Return values will also be the camelCase variant, if you need to translate that to hypenated style use:\n    //\n    //     str.replace(/([A-Z])/g, function(str,m1){ return '-' + m1.toLowerCase(); }).replace(/^ms-/,'-ms-');\n\n    // If you're trying to ascertain which transition end event to bind to, you might do something like...\n    //\n    //     var transEndEventNames = {\n    //       'WebkitTransition' : 'webkitTransitionEnd',\n    //       'MozTransition'    : 'transitionend',\n    //       'OTransition'      : 'oTransitionEnd',\n    //       'msTransition'     : 'MSTransitionEnd',\n    //       'transition'       : 'transitionend'\n    //     },\n    //     transEndEventName = transEndEventNames[ Modernizr.prefixed('transition') ];\n\n    Modernizr.prefixed      = function(prop, obj, elem){\n      if(!obj) {\n        return testPropsAll(prop, 'pfx');\n      } else {\n        // Testing DOM property e.g. Modernizr.prefixed('requestAnimationFrame', window) // 'mozRequestAnimationFrame'\n        return testPropsAll(prop, obj, elem);\n      }\n    };\n    /*>>prefixed*/\n\n\n    /*>>cssclasses*/\n    // Remove \"no-js\" class from <html> element, if it exists:\n    docElement.className = docElement.className.replace(/(^|\\s)no-js(\\s|$)/, '$1$2') +\n\n                            // Add the new classes to the <html> element.\n                            (enableClasses ? ' js ' + classes.join(' ') : '');\n    /*>>cssclasses*/\n\n    return Modernizr;\n\n})(this, this.document);\n"],"names":["window","Modernizr","window1","document","undefined","TAGNAMES","featureName","hasOwnProp","docElement","documentElement","mod","modElem","createElement","mStyle","style","inputElem","toString","prefixes","split","omPrefixes","cssomPrefixes","domPrefixes","toLowerCase","ns","tests","inputs","attrs","classes","slice","injectElementWithStyles","rule","callback","nodes","testnames","ret","node","docOverflow","div","body","fakeBody","parseInt","id","appendChild","join","innerHTML","background","overflow","parentNode","removeChild","isEventSupported","eventName","element","isSupported","setAttribute","removeAttribute","is","_hasOwnProperty","hasOwnProperty","setCss","str","cssText","obj","type","contains","substr","indexOf","testProps","props","prefixed","i","prop","testPropsAll","elem","ucProp","charAt","toUpperCase","testDOMProps","item","bind","feature","call","object","property","constructor","prototype","Function","that","target","TypeError","args","arguments","bound","apply","concat","F","self","result","Object","getContext","fillText","WebGLRenderingContext","bool","DocumentTouch","offsetTop","navigator","postMessage","openDatabase","documentMode","history","pushState","backgroundColor","test","textShadow","str1","opacity","str2","str3","length","backgroundImage","offsetLeft","offsetHeight","getElementById","sheet","styleSheet","cssRules","canPlayType","Boolean","ogg","replace","h264","webm","e","mp3","wav","m4a","localStorage","setItem","removeItem","sessionStorage","Worker","applicationCache","createElementNS","svg","createSVGRect","firstChild","namespaceURI","push","input","len","list","HTMLDataListElement","inputElemType","defaultView","value","WebkitAppearance","getComputedStyle","checkValidity","addTest","key","className","supportsHtml5Styles","supportsUnknownElements","options","html5","reSkip","saveClones","expando","expanID","expandoData","getElements","elements","getExpandoData","ownerDocument","data","nodeName","cache","cloneNode","createElem","canHaveChildren","tagUrn","frag","shivDocument","p","parent","shivCSS","hasCSS","getElementsByTagName","insertBefore","lastChild","createFrag","createDocumentFragment","shivMethods","a","childNodes","clone","elems","l","_version","_prefixes","_domPrefixes","_cssomPrefixes","mq","matchMedia","msMatchMedia","matches","currentStyle","hasEvent","testProp","testAllProps","testStyles"],"version":3,"file":"index.a8364142.js.map"}